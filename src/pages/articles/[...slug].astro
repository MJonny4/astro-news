---
export async function getStaticPaths() {
  try {
    // Get articles from all source folders using import.meta.glob
    const newsApiGlob = import.meta.glob('../../articles/newsapi/*.md', { eager: true });
    const guardianGlob = import.meta.glob('../../articles/guardian/*.md', { eager: true });
    const alphaVantageGlob = import.meta.glob('../../articles/alphavantage/*.md', { eager: true });
    
    // Convert glob results to arrays with file paths
    const newsApiArticles = Object.entries(newsApiGlob).map(([path, module]: [string, any]) => ({
      ...module,
      file: path
    }));
    
    const guardianArticles = Object.entries(guardianGlob).map(([path, module]: [string, any]) => ({
      ...module,
      file: path
    }));
    
    const alphaVantageArticles = Object.entries(alphaVantageGlob).map(([path, module]: [string, any]) => ({
      ...module,
      file: path
    }));
    
    const allArticles = [...newsApiArticles, ...guardianArticles, ...alphaVantageArticles];
    
    return allArticles.map((article: any) => {
      const articleId = article.frontmatter?.id || article.file.split('/').pop()?.replace('.md', '') || '';
      const sourceFolder = article.file.includes('/newsapi/') ? 'newsapi' : 
                          article.file.includes('/guardian/') ? 'guardian' : 'alphavantage';
      
      return {
        params: { slug: articleId },
        props: { article, source: sourceFolder, articleId }
      };
    });
  } catch (e) {
    console.error('Error loading articles for static paths:', e);
    return [];
  }
}

// Define the expected shape of frontmatter
interface Frontmatter {
  id?: string;
  title?: string;
  source?: string;
  publishedAt?: string;
  url?: string;
  author?: string;
  keyword?: string;
  newsType?: string;
}

interface Article {
  frontmatter?: Frontmatter;
  compiledContent: () => string;
}

const { article, source: sourceFolder, articleId } = Astro.props as { article: Article; source: string; articleId: string };
const { id, title, source, publishedAt, url, author, keyword, newsType } = article?.frontmatter || {};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} - Financial News Hub</title>
    <style>
      body {
        font-family: system-ui, sans-serif;
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
      }
      .container {
        max-width: 900px;
        margin: 0 auto;
        padding: 2rem;
      }
      .navigation {
        margin-bottom: 2rem;
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
      }
      .back-link {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        padding: 0.75rem 1.5rem;
        text-decoration: none;
        border-radius: 25px;
        font-weight: 500;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
      }
      .back-link:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
      }
      .article-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }
      .header {
        padding: 2rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
      }
      .title {
        color: #2c3e50;
        margin: 0 0 1rem 0;
        font-size: 2rem;
        line-height: 1.3;
      }
      .meta {
        color: #666;
        font-size: 0.95rem;
        margin: 1rem 0;
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
      }
      .source-badge {
        background: #007acc;
        color: white;
        padding: 0.4rem 0.8rem;
        border-radius: 15px;
        font-size: 0.85rem;
        font-weight: 500;
      }
      .source-newsapi { background: #ff6b6b; }
      .source-guardian { background: #4ecdc4; }
      .source-alphavantage { background: #45b7d1; }
      .content {
        padding: 2rem;
        line-height: 1.8;
      }
      .content h1, .content h2, .content h3 {
        color: #2c3e50;
        margin-top: 2rem;
        margin-bottom: 1rem;
      }
      .content p {
        margin-bottom: 1.2rem;
      }
      .actions {
        padding: 2rem;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        background: rgba(0, 0, 0, 0.02);
      }
      .external-link {
        background: #007acc;
        color: white;
        padding: 0.75rem 1.5rem;
        text-decoration: none;
        border-radius: 25px;
        display: inline-block;
        transition: all 0.3s ease;
        font-weight: 500;
      }
      .external-link:hover {
        background: #005a9e;
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0, 122, 204, 0.3);
      }
    </style>
  </head>
  <body>
    <div class="container">
      <nav class="navigation">
        <a href="/" class="back-link">← All Sources</a>
        <a href={`/?source=${source}`} class="back-link">← {source} Articles</a>
      </nav>
      
      <div class="article-container">
        <div class="header">
          <h1 class="title">{title}</h1>
          <div class="meta">
            <span class={`source-badge source-${sourceFolder}`}>{source}</span>
            {publishedAt && <span>Published: {publishedAt}</span>}
            {author && <span>By: {author}</span>}
          </div>
          {keyword && <div class="meta"><strong>Keyword:</strong> {keyword} • <strong>Type:</strong> {newsType}</div>}
        </div>

        <div class="content">
          <article set:html={article.compiledContent()} />
        </div>

        {url && (
          <div class="actions">
            <a href={url} target="_blank" rel="noopener noreferrer" class="external-link">
              Read Original Article →
            </a>
          </div>
        )}
      </div>
    </div>
  </body>
</html>