---
// Get articles from all source folders using modern import.meta.glob
let allArticles: any = []
let articlesBySource: Record<string, any[]> = {}

try {
    // Get articles from each source folder using import.meta.glob
    const newsApiGlob = import.meta.glob('../articles/newsapi/*.md', { eager: true })
    const guardianGlob = import.meta.glob('../articles/guardian/*.md', { eager: true })
    const alphaVantageGlob = import.meta.glob('../articles/alphavantage/*.md', { eager: true })
    
    // Convert glob results to arrays with file paths
    const newsApiArticles = Object.entries(newsApiGlob).map(([path, module]: [string, any]) => ({
        ...module,
        file: path
    }))
    
    const guardianArticles = Object.entries(guardianGlob).map(([path, module]: [string, any]) => ({
        ...module,
        file: path
    }))
    
    const alphaVantageArticles = Object.entries(alphaVantageGlob).map(([path, module]: [string, any]) => ({
        ...module,
        file: path
    }))
    
    articlesBySource = {
        'NewsAPI': newsApiArticles,
        'Guardian': guardianArticles,
        'AlphaVantage': alphaVantageArticles
    }
    
    allArticles = [...newsApiArticles, ...guardianArticles, ...alphaVantageArticles]
} catch (e) {
    console.error('Error loading articles:', e)
    allArticles = []
    articlesBySource = {
        'NewsAPI': [],
        'Guardian': [],
        'AlphaVantage': []
    }
}

// Get the selected source from URL params (for filtering)
const url = Astro.url
const sourceFilter = url.searchParams.get('source') || 'all'
const displayArticles = sourceFilter === 'all' ? allArticles : (articlesBySource[sourceFilter] || [])
---

<html lang='en'>
    <head>
        <meta charset='utf-8' />
        <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
        <meta name='viewport' content='width=device-width' />
        <meta name='generator' content={Astro.generator} />
        <title>Financial News Hub</title>
        <style>
            body {
                font-family: system-ui, sans-serif;
                margin: 0;
                padding: 0;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 2rem;
            }
            .header {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 16px;
                padding: 2rem;
                margin-bottom: 2rem;
                text-align: center;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            }
            .navbar {
                display: flex;
                justify-content: center;
                gap: 1rem;
                margin: 2rem 0;
                flex-wrap: wrap;
            }
            .nav-button {
                padding: 0.75rem 1.5rem;
                border: none;
                border-radius: 25px;
                background: rgba(255, 255, 255, 0.2);
                color: white;
                text-decoration: none;
                font-weight: 500;
                transition: all 0.3s ease;
                backdrop-filter: blur(10px);
            }
            .nav-button:hover, .nav-button.active {
                background: rgba(255, 255, 255, 0.3);
                transform: translateY(-2px);
                box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
            }
            .source-section {
                margin-bottom: 3rem;
            }
            .source-header {
                background: rgba(255, 255, 255, 0.9);
                backdrop-filter: blur(10px);
                border-radius: 12px;
                padding: 1.5rem;
                margin-bottom: 1.5rem;
                display: flex;
                align-items: center;
                gap: 1rem;
            }
            .source-icon {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
                color: white;
            }
            .newsapi { background: #ff6b6b; }
            .guardian { background: #4ecdc4; }
            .alphavantage { background: #45b7d1; }
            .article-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                gap: 1.5rem;
            }
            .article-card {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 16px;
                padding: 1.5rem;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            .article-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
            }
            .article-title {
                color: #2c3e50;
                text-decoration: none;
                font-weight: bold;
                font-size: 1.1rem;
                line-height: 1.4;
                display: block;
                margin-bottom: 1rem;
            }
            .article-title:hover {
                color: #3498db;
            }
            .article-meta {
                color: #666;
                font-size: 0.9rem;
                margin: 0.5rem 0;
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;
                align-items: center;
            }
            .article-description {
                color: #555;
                line-height: 1.6;
                margin-top: 1rem;
            }
            .source-badge {
                background: #007acc;
                color: white;
                padding: 0.3rem 0.8rem;
                border-radius: 15px;
                font-size: 0.8rem;
                font-weight: 500;
            }
            .stats {
                display: flex;
                justify-content: center;
                gap: 2rem;
                margin: 1rem 0;
                flex-wrap: wrap;
            }
            .stat {
                text-align: center;
                padding: 0.5rem;
            }
            .stat-number {
                font-size: 2rem;
                font-weight: bold;
                color: #2c3e50;
            }
            .stat-label {
                font-size: 0.9rem;
                color: #666;
            }
            .no-articles {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 16px;
                padding: 3rem;
                text-align: center;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            }
        </style>
    </head>
    <body>
        <div class='container'>
            <div class='header'>
                <h1>ðŸ“° Financial News Hub</h1>
                <p>Latest news articles from multiple trusted sources</p>
                
                <div class='stats'>
                    <div class='stat'>
                        <div class='stat-number'>{allArticles.length}</div>
                        <div class='stat-label'>Total Articles</div>
                    </div>
                    <div class='stat'>
                        <div class='stat-number'>{Object.keys(articlesBySource).filter(key => articlesBySource[key].length > 0).length}</div>
                        <div class='stat-label'>Active Sources</div>
                    </div>
                </div>
            </div>

            <nav class='navbar'>
                <a href='/' class={sourceFilter === 'all' ? 'nav-button active' : 'nav-button'}>
                    ðŸ“Š All Sources ({allArticles.length})
                </a>
                <a href='?source=NewsAPI' class={sourceFilter === 'NewsAPI' ? 'nav-button active' : 'nav-button'}>
                    ðŸ“ˆ NewsAPI ({articlesBySource['NewsAPI']?.length || 0})
                </a>
                <a href='?source=Guardian' class={sourceFilter === 'Guardian' ? 'nav-button active' : 'nav-button'}>
                    ðŸ“° Guardian ({articlesBySource['Guardian']?.length || 0})
                </a>
                <a href='?source=AlphaVantage' class={sourceFilter === 'AlphaVantage' ? 'nav-button active' : 'nav-button'}>
                    ðŸ“Š Alpha Vantage ({articlesBySource['AlphaVantage']?.length || 0})
                </a>
            </nav>

            {displayArticles.length > 0 ? (
                sourceFilter === 'all' ? (
                    // Show articles grouped by source
                    Object.entries(articlesBySource).map(([sourceName, articles]) => (
                        articles.length > 0 && (
                            <div class='source-section'>
                                <div class='source-header'>
                                    <div class={`source-icon ${sourceName.toLowerCase()}`}>
                                        {sourceName === 'NewsAPI' ? 'ðŸ“ˆ' : sourceName === 'Guardian' ? 'ðŸ“°' : 'ðŸ“Š'}
                                    </div>
                                    <div>
                                        <h2>{sourceName}</h2>
                                        <p>{articles.length} articles</p>
                                    </div>
                                </div>
                                <div class='article-grid'>
                                    {articles.slice(0, 5).map((article: any) => {
                                        const articleId = article.frontmatter?.id || article.file.split('/').pop()?.replace('.md', '') || '';
                                        return (
                                        <div class='article-card'>
                                            <a href={`/articles/${articleId}`} class='article-title'>
                                                {article.frontmatter?.title || 'Untitled'}
                                            </a>
                                            <div class='article-meta'>
                                                <span class='source-badge'>{article.frontmatter?.source}</span>
                                                <span>Published: {article.frontmatter?.publishedAt}</span>
                                                {article.frontmatter?.author && <span>By: {article.frontmatter.author}</span>}
                                            </div>
                                            <div class='article-description'>
                                                {article.frontmatter?.keyword && (
                                                    <p><strong>Keyword:</strong> {article.frontmatter.keyword}</p>
                                                )}
                                                <p><strong>External Link:</strong> <a href={article.frontmatter?.url} target='_blank' rel='noopener noreferrer'>View Original â†’</a></p>
                                            </div>
                                        </div>
                                        );
                                    })}
                                </div>
                            </div>
                        )
                    ))
                ) : (
                    // Show filtered articles
                    <div class='article-grid'>
                        {displayArticles.map((article: any) => {
                            const articleId = article.frontmatter?.id || article.file.split('/').pop()?.replace('.md', '') || '';
                            return (
                            <div class='article-card'>
                                <a href={`/articles/${articleId}`} class='article-title'>
                                    {article.frontmatter?.title || 'Untitled'}
                                </a>
                                <div class='article-meta'>
                                    <span class='source-badge'>{article.frontmatter?.source}</span>
                                    <span>Published: {article.frontmatter?.publishedAt}</span>
                                    {article.frontmatter?.author && <span>By: {article.frontmatter.author}</span>}
                                </div>
                                <div class='article-description'>
                                    {article.frontmatter?.keyword && (
                                        <p><strong>Keyword:</strong> {article.frontmatter.keyword}</p>
                                    )}
                                    <p><strong>External Link:</strong> <a href={article.frontmatter?.url} target='_blank' rel='noopener noreferrer'>View Original â†’</a></p>
                                </div>
                            </div>
                            );
                        })}
                    </div>
                )
            ) : (
                <div class='no-articles'>
                    <h2>No Articles Found</h2>
                    <p>Run the PowerShell script to fetch news articles:</p>
                    <code>.\Get-NewsArticles.ps1 -Keyword "crypto" -ArticlesPerSource 5 -NewsType "financial"</code>
                    <br><br>
                    <p>Then enhance article content with Claude:</p>
                    <code>.\Enhance-Articles.ps1 -EnhancementType "expand" -Keyword "crypto"</code>
                </div>
            )}
        </div>
    </body>
</html>
